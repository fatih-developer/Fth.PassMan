// <auto-generated />
using DataAccess.Concrete.EntityFramework.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations.PassMan
{
    [DbContext(typeof(PassManContext))]
    partial class PassManContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Concrete.EntityFramework.Calendar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<int>("Week")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Calendars");
                });

            modelBuilder.Entity("Entities.Concrete.EntityFramework.Connection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConnectionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RfCustomer")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RfCustomer");

                    b.ToTable("Connections");
                });

            modelBuilder.Entity("Entities.Concrete.EntityFramework.Control", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrevData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RfCustomer")
                        .HasColumnType("int");

                    b.Property<int>("RfPlan")
                        .HasColumnType("int");

                    b.Property<string>("Todo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Warning")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("RfCustomer");

                    b.HasIndex("RfPlan");

                    b.ToTable("Controls");
                });

            modelBuilder.Entity("Entities.Concrete.EntityFramework.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Entities.Concrete.EntityFramework.Plan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("End")
                        .HasColumnType("bit");

                    b.Property<int>("RfCalendar")
                        .HasColumnType("int");

                    b.Property<int>("RfCustomer")
                        .HasColumnType("int");

                    b.Property<bool>("Start")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("RfCalendar");

                    b.HasIndex("RfCustomer");

                    b.ToTable("Plans");
                });

            modelBuilder.Entity("Entities.Concrete.EntityFramework.Connection", b =>
                {
                    b.HasOne("Entities.Concrete.EntityFramework.Customer", "Customers")
                        .WithMany("Connections")
                        .HasForeignKey("RfCustomer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customers");
                });

            modelBuilder.Entity("Entities.Concrete.EntityFramework.Control", b =>
                {
                    b.HasOne("Entities.Concrete.EntityFramework.Customer", "Customers")
                        .WithMany()
                        .HasForeignKey("RfCustomer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.EntityFramework.Plan", "Plan")
                        .WithMany("Controls")
                        .HasForeignKey("RfPlan")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customers");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("Entities.Concrete.EntityFramework.Plan", b =>
                {
                    b.HasOne("Entities.Concrete.EntityFramework.Calendar", "Calendar")
                        .WithMany("Plans")
                        .HasForeignKey("RfCalendar")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.EntityFramework.Customer", "Customers")
                        .WithMany()
                        .HasForeignKey("RfCustomer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Calendar");

                    b.Navigation("Customers");
                });

            modelBuilder.Entity("Entities.Concrete.EntityFramework.Calendar", b =>
                {
                    b.Navigation("Plans");
                });

            modelBuilder.Entity("Entities.Concrete.EntityFramework.Customer", b =>
                {
                    b.Navigation("Connections");
                });

            modelBuilder.Entity("Entities.Concrete.EntityFramework.Plan", b =>
                {
                    b.Navigation("Controls");
                });
#pragma warning restore 612, 618
        }
    }
}
